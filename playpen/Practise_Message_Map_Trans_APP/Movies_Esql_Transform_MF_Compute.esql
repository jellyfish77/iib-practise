

CREATE COMPUTE MODULE Movies_Esql_Transform_MF_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		--CALL CopyEntireMessage();
		
		-- create new message field
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		
		-- create references placeholders (the values will be changed later)
		DECLARE movie REFERENCE TO InputRoot.XMLNSC.Movies.Movie;
		--DECLARE films REFERENCE TO OutputRoot.XMLNSC.Films;
		DECLARE film REFERENCE TO OutputRoot.XMLNSC.Films;
		DECLARE ratings REFERENCE TO OutputRoot.XMLNSC.Films.Film;
		DECLARE plot REFERENCE TO OutputRoot.XMLNSC.Films.Film;		
				
		-- loop all movies om input message	
		WHILE LASTMOVE(movie)=TRUE DO
		
			-- create the new output message node
			CREATE LASTCHILD OF OutputRoot.XMLNSC.Films AS film Type XMLNSC.Folder Name 'Film';
			
			-- add elements to output
			SET film.(XMLNSC.Field)Name = movie.Title;
			SET film.(XMLNSC.Field)ImdbId = movie.ImdbId;
			SET film.(XMLNSC.Field)Lang = movie.Format.Language;
						
			-- create reference to Rating node of input message
			DECLARE rating REFERENCE TO movie.Ratings.Rating;			
			-- loop all Rating elements on input message
			WHILE LASTMOVE(rating) DO				
				-- create new Rating node on output message
				CREATE LASTCHILD OF film.Ratings AS ratings Type XMLNSC.Folder Name 'Rating';
				-- set element values 
				SET ratings.(XMLNSC.Field)Score = rating.Value;
				SET ratings.(XMLNSC.Field)Website = rating.Source;
				
				MOVE rating NEXTSIBLING NAME 'Rating';
			END WHILE;
			
			DECLARE plotkeywords REFERENCE TO movie.Plot.PlotKeywords;
			WHILE LASTMOVE(plotkeywords) DO						
				CREATE LASTCHILD OF film.Plot AS plot Type XMLNSC.Folder Name 'Keywords';			
				set plot.(XMLNSC.Field)Keywords = plot.PlotKeyword;				
				MOVE plotkeywords NEXTSIBLING NAME 'PlotKeywords';
			END WHILE;
						
			MOVE movie NEXTSIBLING NAME 'Movie';
		
		END WHILE;
		
		RETURN TRUE;		
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
